/*
* Interactive Timeslice version 1.0
*
*  Copyright ⓒ 2017 kt corp. All rights reserved.
*
*  This is a proprietary software of kt corp, and you may not use this file except in
*  compliance with license agreement with kt corp. Any redistribution or use of this
*  software, with or without modification shall be strictly prohibited without prior written
*  approval of kt corp, and the copyright notice above does not evidence any actual or
*  intended publication of such software.
*/
package com.kt.its.api.service.monitoring;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.util.List;

import rx.Observable;

import com.google.common.collect.Lists;
import com.kt.its.api.common.HttpClient;
import com.kt.its.api.common.Resource;
import com.kt.its.api.service.server.ServerConfig;
import com.netflix.loadbalancer.AbstractLoadBalancer.ServerGroup;
import com.netflix.loadbalancer.BaseLoadBalancer;
import com.netflix.loadbalancer.ILoadBalancer;
import com.netflix.loadbalancer.IPing;
import com.netflix.loadbalancer.LoadBalancerBuilder;
import com.netflix.loadbalancer.LoadBalancerStats;
import com.netflix.loadbalancer.Server;
import com.netflix.loadbalancer.reactive.LoadBalancerCommand;
import com.netflix.loadbalancer.reactive.ServerOperation;

/** 
 * <pre>
 * 설명		: 시스템 모니터링을 위한 PING Utility 클래스
 * 작성일 	: 2017.02.08
 * 작성자 	: yccho
 * 변경 이력 	:
 * </pre>
 */
@SuppressWarnings("PMD")
public class URLConnectionLoadBalancer {
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
    private final ILoadBalancer loadBalancer;

    // retry handler that does not retry on same server, but on a different server
    //private final RetryHandler retryHandler = new DefaultLoadBalancerRetryHandler(0, 1, true);
    
    // PING 대상: 0: Socket, 1: httpUrl
    private final int PING_SOCKET = 0;
    private final int PING_HTTPURL = 1;
    private int pingTarget = PING_HTTPURL;
    private String targetPath = "";
    private int pingIntervalSec = Resource.MONITORING_REPEAT_SEC;
    
    private ServerConfig serverConfig;
    
    public URLConnectionLoadBalancer(ServerConfig serverConfig, List<Server> serverList) {
    	this(serverConfig, serverList, "");
    }
    
    public URLConnectionLoadBalancer(ServerConfig serverConfig, List<Server> serverList, String serverPath) {
    	this.serverConfig = serverConfig;
    	this.targetPath = serverPath;
    	
    	loadBalancer = LoadBalancerBuilder.newBuilder().withPing(new SimplePing()).buildFixedServerListLoadBalancer(serverList);
    	((BaseLoadBalancer) loadBalancer).setPingInterval(pingIntervalSec);
    }
    
    public String call(final String path) throws Exception {
        return LoadBalancerCommand.<String>builder()
                .withLoadBalancer(loadBalancer)
                .build()
                .submit(new ServerOperation<String>() {
            @Override
            public Observable<String> call(Server server) {
                //URL url;
                try {
                	
                    /*StringBuilder url = new StringBuilder();
                    url.append("http://")
                    .append(server.getHost())
                    .append(":")
                    .append(server.getPort())
                    .append(path);
                    
                    return Observable.just(url.toString());*/
                	return Observable.just(server.getId());
                } catch (Exception e) {
                    return Observable.error(e);
                }
            }
        }).toBlocking().first();
    }
    
    public LoadBalancerStats getLoadBalancerStats() {
        return ((BaseLoadBalancer) loadBalancer).getLoadBalancerStats();
        
    }

    public List<Server> getServerList() {
        return ((BaseLoadBalancer) loadBalancer).getServerList(ServerGroup.STATUS_UP);
    }
    
    public String chooseServerByLoadBalancer(){
    	String server = "";
        try {
        	server = call("/");
        	logger.info(server);
		} catch (Exception e) {
			logger.error("", e);
		}
        return server; 
    }
    
    class SimplePing implements IPing {
		@Override
		public boolean isAlive(Server server) {

			String host = server.getHost();
			int port = server.getPort();
			
        	if(pingTarget == PING_SOCKET) {
    			Socket socket = null;
                try {
	            	socket = new Socket();
	            	socket.connect(new InetSocketAddress(host, port), 1000);
	            	//logger.info("Server alive check : [isAlive : true ] => [" + server.getHost() + ":" + server.getPort() + "] [Zone : " + server.getZone() + "]");
	            	logger.info("Server alive check : [isAlive : true ] => [" + server.getId() + "] [Zone : " + server.getZone() + "]");
	            	
                } catch (IOException e) {
                	//logger.info("Server alive check : [isAlive : false ] => [" + server.getHost() + ":" + server.getPort() + "] [Zone : " + server.getZone() + "]");
	            	logger.info("Server alive check : [isAlive : false ] => [" + server.getId() + "] [Zone : " + server.getZone() + "]");
	            	
                	return false;
                } finally {
                	if(socket != null) {
               			try {
    						socket.close();
    					} catch (IOException e) {
    						logger.error("", e);
    					}
                	}
            		socket = null;
                }
                
                return true;
        	}
        	else {

        		StringBuilder sb = new StringBuilder();

    	    	StringBuilder targetUrl = new StringBuilder();
    	    	targetUrl.append("http://")
                .append(host)
                .append(":")
                .append(port)
                .append(targetPath);
                
    	    	HttpURLConnection conn = null;
    	    	try
    	    	{
    	    		conn = (HttpURLConnection)new URL(targetUrl.toString()).openConnection();
    	    		conn.setDoOutput(true);
    	    		conn.setConnectTimeout(1000);
    	    		conn.setReadTimeout(1000);
    	    		conn.setRequestProperty("content-type", "application/json;charset=utf-8");
    	    		
    	    		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
    	    		for (String str = null; (str = rd.readLine()) != null; )
    	    		{
    	    			sb.append(str);
    	    		}
    	    		rd.close();
    	    		//sb.append(HttpClient.call(targetUrl.toString(), null, 1000, 1000));
    	    	} catch (Exception e) {
    	    		sb = null;
    	        } finally {
    	        	if(conn != null) conn.disconnect();
    	        }
    	    	
            	if(sb != null && sb.toString().indexOf("\"000\"") != -1) {
            		if(!server.isAlive()) {
            			logger.info("Server alive check : [isAlive : true ] => [" + targetUrl + "]");
            		
            			// 서버상태변경
	            		if(Resource.IS_MONITORING)
	            			serverConfig.updateServerState(server, Resource.STATE_START);
            		}            		
	                return true;
	    		} else {
            		if(server.isAlive()) {
            			logger.info("Server alive check : [isAlive : false ] => [" + targetUrl + "]");
            		
            			// 서버상태변경
	            		if(Resource.IS_MONITORING)
	            			serverConfig.updateServerState(server, Resource.STATE_STOP);
            		}
	    			return false;
	    		}
            	
            	
        	}
		}
    	
    }

    public static void main(String[] args) {
    	
    	Server s1 = new Server("dev.copynpaste.co.kr:8380");
    	Server s2 = new Server("192.168.1.34:8000");
    	//Server s3 = new Server("100.100.100.100", 80);
    	
        URLConnectionLoadBalancer urlLoadBalancer = new URLConnectionLoadBalancer(null, Lists.newArrayList(s2));
//        try {
//			Thread.sleep(10000);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
        
        for (int i = 0; i < 6; i++) {
            try {
            	System.out.println("["+i+"]");
				System.out.println(urlLoadBalancer.call("/"));
			} catch (Exception e) {
				e.printStackTrace();
			}
        }
        try {
			Thread.sleep(60000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
        for (int i = 0; i < 6; i++) {
            try {
            	System.out.println("["+i+"]");
				System.out.println(urlLoadBalancer.call("/"));
			} catch (Exception e) {
				e.printStackTrace();
			}
        }
        try {
			Thread.sleep(60000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
        
        System.out.println("=== Load balancer stats ===");
        //System.out.println(urlLoadBalancer.getLoadBalancerStats());
        System.out.println(urlLoadBalancer.getServerList());
        
    }    
   
    
}
