/*
* Interactive Timeslice version 1.0
*
*  Copyright ⓒ 2017 kt corp. All rights reserved.
*
*  This is a proprietary software of kt corp, and you may not use this file except in
*  compliance with license agreement with kt corp. Any redistribution or use of this
*  software, with or without modification shall be strictly prohibited without prior written
*  approval of kt corp, and the copyright notice above does not evidence any actual or
*  intended publication of such software.
*/
package com.kt.its.api.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.kt.its.api.common.CommonUtil;
import com.kt.its.api.data.CompMapper;

/** 
 * <pre>
 * 설명		: 대회 정보 Service 구현
 * 작성일 	: 2017.02.08
 * 작성자 	: yccho
 * 변경 이력 	:
 * </pre>
 */
@Repository
public class CompServiceImpl implements CompService {
	private final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	CompMapper compMapper;

	@Override
	public Map<String, Object> selectCompInfo(String compId) {
		logger.info("selectCompInfo compId::"+ compId);

		Map<String, Object> resultMap = new HashMap<String, Object>();

		try {
			Map<String, Object> m = compMapper.selectCompInfo(compId);
			
			if(m != null) {
				resultMap.put("compId", m.get("compId"));
				resultMap.put("compNm", m.get("compNm"));
				resultMap.put("compImgUrl", CommonUtil.getCompUrl((String)m.get("compId"), (String)m.get("compImgUrl")));
				resultMap.put("compSubImgUrl", CommonUtil.getCompUrl((String)m.get("compId"), (String)m.get("compSubImgUrl")));
			} else {
				resultMap.put("compId", "");
				resultMap.put("compNm", "");
				resultMap.put("compImgUrl", "");
				resultMap.put("compSubImgUrl", "");
			}
			
		} catch (Exception e) {
			throw new ServiceException(e.getMessage(), e.getCause());
		}
			
		logger.info("selectCompInfo result::" + resultMap);

		return resultMap;
	}

	@Override
	public List<Map<String, Object>> selectCompList() {
		logger.info("selectCompList ::");

		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
		
		try {
			List<Map<String, Object>> list = compMapper.selectCompList();
			
			if(list != null && list.size() > 0) {
				for(Map<String, Object> m : list) {
					Map<String, Object> resultMap = new HashMap<String, Object>();

					resultMap.put("compId", m.get("compId"));
					resultMap.put("compNm", m.get("compNm"));
					resultMap.put("compImgUrl", CommonUtil.getCompUrl((String)m.get("compId"), (String)m.get("compImgUrl")));
					resultMap.put("compSubImgUrl", CommonUtil.getCompUrl((String)m.get("compId"), (String)m.get("compSubImgUrl")));

					resultList.add(resultMap);
				}
			}				
			
		} catch (Exception e) {
			throw new ServiceException(e.getMessage(), e.getCause());
		}
			
		logger.info("selectCompList result >>> " + resultList);
		
		return resultList;
	}

}
