/*
* Interactive Timeslice version 1.0
*
*  Copyright ⓒ 2017 kt corp. All rights reserved.
*
*  This is a proprietary software of kt corp, and you may not use this file except in
*  compliance with license agreement with kt corp. Any redistribution or use of this
*  software, with or without modification shall be strictly prohibited without prior written
*  approval of kt corp, and the copyright notice above does not evidence any actual or
*  intended publication of such software.
*/
package com.kt.its.api.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kt.its.api.common.Resource;
import com.kt.its.api.common.ResultUtil;
import com.kt.its.api.common.ResultUtil.RESULT_CODE;
import com.kt.its.api.service.monitoring.CaptureSystemMonitoring;

/** 
 * <pre>
 * 설명		: 시스템 Monitoring API Controller
 * 작성일 	: 2017.02.08
 * 작성자 	: yccho
 * 변경 이력 	:
 * </pre>
 */
@SuppressWarnings("PMD")
@Controller
public class MonitoringController extends BaseController {
	
	@Autowired
	CaptureSystemMonitoring csMonitoring;
	
	@Autowired
	CameraController camController;
	
	/**
	 * 전체 시스템 동작 제어
	 * @param command
	 * @return
	 */
	@RequestMapping(value = "/monitoring/control/{command}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Object> control(
			HttpServletRequest request,
			@PathVariable String command) {
		
		String procTitle = "[전체 시스템 동작 제어] ";
		logger.info(procTitle + "Start control :: command=" + command);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();

		try {
			if(command.equals("1")) { // 시스템준비(모니터링시작)
				csMonitoring.startMonitoring(); // 시작
				Resource.IS_MONITORING = true;
			} else if(command.equals("2")) {
				csMonitoring.stopMonitoring(); // 종료
				Resource.IS_MONITORING = false;
			}
			
			// Capture System에 시작/종료 명령 전송
			Map<String, Object> map = camController.control(request, command);
			
			ResultUtil.setSuccess(resultMap);
		}
		catch(Exception e) {
			logger.error(procTitle + "Exception :: ", e);
			ResultUtil.setError(RESULT_CODE.SYSTEM_ERROR, resultMap);
		}
		
		logger.debug(procTitle + "Result :: " + resultMap.toString());
		logger.info(procTitle + "End control :: command=" + command);
		
		return resultMap;
	}
	
//	/**
//	 * Encoder 동작 상태 조회
//	 * @return
//	 */
//	@RequestMapping(value = "/monitoring/encState", method = RequestMethod.GET)
//	public @ResponseBody Map<String, Object> encState() {
//		
//		String procTitle = "[Encoder 동작 상태 조회] ";
//		logger.info(procTitle + "Start encState :: ");
//		
//		Map<String, Object> resultMap = new HashMap<String, Object>();
//
//		try {
//			
//			
//			
//			
//			ResultUtil.setSuccess(resultMap);
//			logger.debug(procTitle + "Result :: " + resultMap.toString());
//		}
//		catch(Exception e) {
//			logger.error(procTitle + "Exception :: ", e);
//			ResultUtil.setError(RESULT_CODE.SYSTEM_ERROR, resultMap);
//		}
//		
//		logger.info(procTitle + "End encState :: ");
//		
//		return resultMap;
//	}
//	
//	/**
//	 * Muxer 동작 상태 조회 
//	 * @return
//	 */
//	@RequestMapping(value = "/monitoring/muxState", method = RequestMethod.GET)
//	public @ResponseBody Map<String, Object> muxState() {
//		
//		String procTitle = "[Muxer 동작 상태 조회] ";
//		logger.info(procTitle + "Start muxState :: ");
//		
//		Map<String, Object> resultMap = new HashMap<String, Object>();
//
//		try {
//			
//			
//			
//			
//			ResultUtil.setSuccess(resultMap);
//			logger.debug(procTitle + "Result :: " + resultMap.toString());
//		}
//		catch(Exception e) {
//			logger.error(procTitle + "Exception :: ", e);
//			ResultUtil.setError(RESULT_CODE.SYSTEM_ERROR, resultMap);
//		}
//		
//		logger.info(procTitle + "End muxState :: ");
//		
//		return resultMap;
//	}
}
